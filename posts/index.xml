<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Siri</title><link>https://sirimhrzn.github.io/posts/</link><description>Recent content in Posts on Siri</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 01 Nov 2024 19:47:24 +0545</lastBuildDate><atom:link href="https://sirimhrzn.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Part 1: Using Nix to package Laravel/Lumen</title><link>https://sirimhrzn.github.io/posts/nix-laravel-02/</link><pubDate>Fri, 01 Nov 2024 19:47:24 +0545</pubDate><guid>https://sirimhrzn.github.io/posts/nix-laravel-02/</guid><description>note: this is a work in progress, I aim to publish this entire series by the end of november
The project I will be packaging is a fairly old project running Laravel/Lumen 5.7 with php73 and we will also be using flakes. We have three options for packaging Laravel applications :
Write derivation from scratch using stdenv.mkDerivation Use pkgs.php.buildComposerProject builder from nixpkgs Use composer2nix to generate nix expressions for composer packages While writing your own derivation is generally good if you want to have more control over the different phases of builds &amp;amp; installs, but you might have to do some extra work to manage output hashes for your dependencies i.</description></item><item><title>Part 0: Integrating Nix for CI, Package Management ft. Laravel</title><link>https://sirimhrzn.github.io/posts/nix-laravel-01/</link><pubDate>Fri, 01 Nov 2024 19:11:12 +0545</pubDate><guid>https://sirimhrzn.github.io/posts/nix-laravel-01/</guid><description>I would like to keep things short and simple so if you do not know about nix i will be listing couple resources to follow and these are the things I will be achieving by the end of this series.
Package Laravel using nix Build container image with nix Setup gitlab-runner and run CI with nix Setup a binary cache server Simple Integration Test using testers.runNixOSTest Why nix? I want my production to be running the same runtime dependencies I used during development.</description></item></channel></rss>